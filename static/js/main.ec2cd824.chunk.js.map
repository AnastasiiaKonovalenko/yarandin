{"version":3,"sources":["api/dataApi.js","components/home/home.js","components/Episode/episode.js","App.js","index.js"],"names":["GetData","URL","fetch","res","ok","Error","json","this","getResource","Home","films","useState","visibleQuery","setVisibleQuery","searchQuery","setSearchQuery","debouncedSetQuery","debounce","location","useLocation","history","useHistory","filmsAfterQuery","filter","item","title","toLowerCase","includes","searchParams","URLSearchParams","search","sortedFilms","sortParam","get","sort","a","b","localeCompare","length","className","type","placeholder","value","onChange","evt","target","onClick","param","set","push","toString","map","film","to","episode_id","key","Episode","id","JSON","parse","find","persons","setPersons","planets","setPlanets","starships","setStarships","urlsCharacters","characters","urlsPlanets","urlsStarships","fetchData","arr","setFunc","Promise","all","url","then","r","results","stringify","useEffect","opening_crawl","director","producer","release_date","person","name","planet","ship","App","setFilms","filmsFromServer","getAll","data","exact","path","render","match","params","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ec2cd824.chunk.js","sourcesContent":["const apiBase = 'https://swapi.co/api';\n\nclass GetData {\n  async getResource(URL) {\n    const res = await fetch(`${apiBase}${URL}`);\n    if (!res.ok) {\n      throw new Error('Could not fetch');\n    }\n\n    return res.json();\n  }\n\n  getAll(URL) {\n    return this.getResource(URL);\n  }\n}\n\nexport default GetData;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\n\nconst Home = ({ films }) => {\n  const [visibleQuery, setVisibleQuery] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const debouncedSetQuery = debounce(setSearchQuery, 1000);\n  const location = useLocation();\n  const history = useHistory();\n\n  const handleChangeQuery = (evt) => {\n    debouncedSetQuery(evt.target.value);\n    setVisibleQuery(evt.target.value);\n  };\n\n  const filmsAfterQuery = !searchQuery\n    ? films\n    : films.filter((item) => item.title.toLowerCase()\n      .includes(searchQuery.toLowerCase()));\n\n\n  const searchParams = new URLSearchParams(location.search);\n\n  let sortedFilms = '';\n\n  const sortParam = searchParams.get('sort');\n\n  if (sortParam) {\n    sortedFilms = (typeof films[0][sortParam] === 'number'\n            || typeof films[0][sortParam] === 'boolean')\n      ? [...filmsAfterQuery]\n        .sort((a, b) => (a[sortParam] - b[sortParam])\n                    * (searchParams.get('orderOfSorting') === 'asc' ? 1 : -1))\n      : [...filmsAfterQuery]\n        .sort((a, b) => (a[sortParam].localeCompare(b[sortParam]))\n                    * (searchParams.get('orderOfSorting') === 'asc' ? 1 : -1));\n  } else {\n    sortedFilms = filmsAfterQuery;\n  }\n\n  const sortFilms = (param) => {\n    searchParams.set('sort', param);\n\n    if (searchParams.get('sort') === param\n            && searchParams.get('orderOfSorting') === 'asc') {\n      searchParams.set('orderOfSorting', 'desc');\n    } else {\n      searchParams.set('orderOfSorting', 'asc');\n    }\n\n    history.push({ search: searchParams.toString() });\n  };\n\n  return (\n    <>\n      {films.length !== 0 ? (\n        <main className=\"main\">\n          <div className=\"stars\" />\n          <div className=\"clouds\" />\n          <h1 className=\"main__heading\">\n            Star wars universe\n          </h1>\n          <div className=\"main__search\">\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={visibleQuery}\n              onChange={handleChangeQuery}\n            />\n\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={() => sortFilms('title')}\n            >\n              Sort\n            </button>\n          </div>\n          <section className=\"films\">\n            {sortedFilms.map((film) => (\n              <Link\n                to={`/${film.episode_id}`}\n                className=\"films__link\"\n                key={film.title}\n              >\n                <article\n                  className=\"films__article\"\n                >\n                  <h2\n                    className=\"films__heading\"\n                  >\n                    {film.title}\n                  </h2>\n                </article>\n              </Link>\n            ))}\n          </section>\n        </main>\n      ) : (\n        <section className=\"section_spinner\">\n          <div className=\"spinner\" />\n        </section>\n      )}\n    </>\n  );\n};\n\nHome.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Episode = ({ id, films }) => {\n  const film = JSON.parse(films).find((item) => item.episode_id === +id);\n\n  const [persons, setPersons] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [starships, setStarships] = useState([]);\n\n  const urlsCharacters = film.characters;\n  const urlsPlanets = film.planets;\n  const urlsStarships = film.starships;\n\n  async function fetchData(arr, setFunc) {\n    const results = await Promise.all(arr\n      .map((url) => fetch(url).then((r) => r.json())));\n    const res = JSON.stringify(results, null, 2);\n    setFunc(JSON.parse(res));\n  }\n\n  useEffect(() => {\n    fetchData(urlsCharacters, setPersons);\n    fetchData(urlsPlanets, setPlanets);\n    fetchData(urlsStarships, setStarships);\n  }, []);\n\n  return (\n    <section className=\"episode\">\n      {persons.length !== 0 && planets.length !== 0 && starships.length !== 0 ? (\n        <section className=\"film\">\n          <h1 className=\"film__heading\">{film.title}</h1>\n          <article className=\"film__prev\">\n            <p className=\"film__text\">\n              {film.opening_crawl}\n            </p>\n          </article>\n\n          <p className=\"film__paragraph\">\n            <span>\n              Director:\n            </span>\n            {` ${film.director}`}\n          </p>\n\n          <p className=\"film__paragraph\">\n            <span>\n              Producer:\n            </span>\n            {` ${film.producer}`}\n          </p>\n\n          <p className=\"film__paragraph\">\n            <span>Release date:</span>\n            {` ${film.release_date}`}\n          </p>\n\n          <div className=\"film__details details\">\n\n            <div className=\"details__block\">\n              <h3 className=\"details__head\">Heroes</h3>\n              {persons.map((person) => (\n                <h4\n                  key={person.name}\n                  className=\"details_heading\"\n                >\n                  {person.name}\n                </h4>\n              ))}\n            </div>\n\n            <div className=\"details__block\">\n              <h3 className=\"details__head\">Planets</h3>\n              {planets.map((planet) => (\n                <h4\n                  key={planet.name}\n                  className=\"details_heading\"\n                >\n                  {planet.name}\n                </h4>\n              ))}\n            </div>\n\n            <div className=\"details__block\">\n              <h3 className=\"details__head\">Starships</h3>\n              {starships.map((ship) => (\n                <h4\n                  key={ship.name}\n                  className=\"details_heading\"\n                >\n                  {ship.name}\n                </h4>\n              ))}\n            </div>\n\n          </div>\n        </section>\n      ) : (\n        <section className=\"section_spinner\">\n          <div className=\"spinner\" />\n        </section>\n      )}\n    </section>\n  );\n};\n\nEpisode.propTypes = {\n  films: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default Episode;\n","import React, { useState, useEffect } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport GetData from './api/dataApi';\nimport Home from './components/home/home';\nimport Episode from './components/Episode/episode';\n\nconst App = () => {\n  const [films, setFilms] = useState([]);\n  const filmsFromServer = new GetData();\n\n  useEffect(() => {\n    filmsFromServer.getAll('/films/').then((data) => {\n      setFilms(data.results);\n    });\n  }, []);\n\n\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home\n          films={films}\n        />\n      </Route>\n\n      <Route\n        path=\"/:id\"\n        render={({ match }) => {\n          const { id } = match.params;\n          return (\n            <Episode\n              id={id}\n              films={JSON.stringify(films)}\n            />\n          );\n        }}\n      />\n\n    </Switch>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './styles/App.scss';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}